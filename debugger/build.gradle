apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'


// バージョン
def appver_major = 1
def appver_minor = 0
def appver_revision = 2
version = "${appver_major}.${appver_minor}.${appver_revision}"

// ライブラリ情報
archivesBaseName = "debugger"
group "work.shion.androidpreparation"


android {
    buildToolsVersion build_tools_version
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion compile_sdk_version
    defaultConfig {
        consumerProguardFiles 'consumer-rules.pro'
        minSdkVersion 21
        targetSdkVersion compile_sdk_version
        versionCode 10000 * appver_major + 100 * appver_minor + appver_revision
        versionName version
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    // AndroidX
    implementation "androidx.appcompat:appcompat:${ver_droidx_appcompat}"
    implementation "androidx.core:core-ktx:${ver_droidx_core}"

    // Google
    kapt "com.google.auto.service:auto-service:1.0-rc7"

    // Hyperion
    def ver_hyperion = "0.9.30"
    implementation "com.willowtreeapps.hyperion:hyperion-attr:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-build-config:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-core:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-crash:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-disk:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-geiger-counter:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-measurement:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-phoenix:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-plugin:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-recorder:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-shared-preferences:${ver_hyperion}"
    implementation "com.willowtreeapps.hyperion:hyperion-timber:${ver_hyperion}"

    // Kotlin
    implementation platform("org.jetbrains.kotlin:kotlin-bom:${kotlin_version}")
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    // LeakCanary
    implementation "com.squareup.leakcanary:leakcanary-android:2.5"

    // Stetho
    def ver_stetho = "1.5.1"
    implementation "com.facebook.stetho:stetho:${ver_stetho}"
}


afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifactId = archivesBaseName
                groupId = project.group
                version = project.version
            }
                }
            }
            }

bintray {
    key = project.hasProperty('bintray_key') ? bintray_key : ''
    override = true
    pkg {
        desc = 'Assemble tools for debugging.'
        licenses = ['MIT']
        name = "${project.group}.${archivesBaseName}"
        publicDownloadNumbers = true
        repo = meta_repository
        vcsUrl = "${meta_github_url}.git"
        version {
            name = project.version
            released  = new Date()
            vcsTag = "Debugger_${project.version}"
        }
        websiteUrl = meta_github_url
    }
    publications = ['release']
    publish = true
    user = project.hasProperty('bintray_user') ? bintray_user : ''
}

task javadoc(type: Javadoc) {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.srcDirs
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
