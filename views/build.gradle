plugins {
    // Android
    id 'com.android.library'

    // Bintray
    id 'com.jfrog.bintray'

    // Kotlin
    id 'kotlin-android'
    id 'kotlin-kapt'

    // Maven
    id 'maven-publish'
}


// バージョン
def appver_major = 0
def appver_minor = 2
def appver_revision = 0
def appver_suffix = ".alpha"
version = "${appver_major}.${appver_minor}.${appver_revision}${appver_suffix}"

// ライブラリ情報
archivesBaseName = "views"


android {
    buildToolsVersion build_tools_version
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    compileSdkVersion compile_sdk_version
    defaultConfig {
        consumerProguardFiles 'consumer-rules.pro'
        minSdkVersion 21
        targetSdkVersion compile_sdk_version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        versionCode 10000 * appver_major + 100 * appver_minor + appver_revision
        versionName version
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

bintray {
    key = bintray_access_key
    pkg {
        licenses = ['MIT']
        name = "${bintray_group_id}.${archivesBaseName}"
        publicDownloadNumbers = true
        repo = bintray_repository
        vcsUrl = "${bintray_github}.git"
        version {
            name = project.version
            released  = new Date()
            //vcsTag = "Views_${project.version}"
        }
        websiteUrl = bintray_github
    }
    publications = ['release']
    user = bintray_access_user
}

dependencies {

    // AndroidX
    implementation "androidx.appcompat:appcompat:${ver_droidx_appcompat}"
    implementation "androidx.core:core-ktx:${ver_droidx_core}"

    // Kotlin
    implementation platform("org.jetbrains.kotlin:kotlin-bom:${kotlin_version}")
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId
                artifactId archivesBaseName
                version this.version

                artifact javadocJar {
                    classifier = 'javadoc'
                    extension = 'jar'
                }
                artifact sourcesJar {
                    classifier = 'sources'
                    extension = 'jar'
                }

                pom.withXml {
                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

task javadoc(type: Javadoc) {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    excludes = ['**/*.kt']
    source = android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
}
